%%writefile top_words.py
#ver 1.1: add exclude words argument
import argparse

def parsing_args():
    """
    Parse the command line arguments and return the parse_args object
    
    There should be 1 positional argument and 3 optional arguments.
    The help message generated by the parser should look like:
    
    usage: top_words.py [-h] [-w WORD] [-x [xword [xword ...]]] [-v] file
    
    positional arguments:
      file                  the name of the inspected file

    optional arguments:
      -h, --help            show this help message and exit
      -w WORD, --word WORD  Number of words for most used words list
      -x [xword [xword ...]], --exclude [xword [xword ...]]
                        word to exclude from the list
      -v, --verbose         Verbose mode
    """
    
    parser = argparse.ArgumentParser()
    parser.add_argument('file', nargs = 1, help = "the name of the inspected file")
    parser.add_argument('-w',"--word", type = int, help = "Number of words for most used words list")
    parser.add_argument('-x','--exclude', metavar = 'xword', default = [], nargs = '*', help = 'word to exclude from the list')
    parser.add_argument('-v','--verbose', action = "store_true", help = "Verbose mode")
    args = parser.parse_args()
    return args

def word_cleaning(word):
    cleaned_word = ''
    for letter in word.lower():
        if letter.isalpha() or letter.isnumeric() :
            cleaned_word += letter
    return cleaned_word

def word_count(file_name, x_list):
    """
    read a file, count the number of words in a file, exclude requested words
    
    args:
        file_name: name of the inspected file
        x_list: words to be omitted from counting
        
    return: 
        word_d: dictionary containing words as keys and their number of appearance as values
    """
    
    word_d = {}
    with open(file_name,'r+') as f:
        F = f.read()
    word_list = F.split()
    for word in word_list:
        cleaned_word = word_cleaning(word)
        if cleaned_word in x_list:
            continue
        if cleaned_word in word_d.keys():
            word_d[cleaned_word] += 1
        else:
            word_d[cleaned_word] = 1
    return word_d

def sortSecond(val): 
    """sort based on second value in the list"""
    
    return val[1]  
                  
def main():
    args = parsing_args()
    word_d = word_count(args.file[0], args.exclude)
    new_d = list(word_d.items())
    new_d.sort(key = sortSecond, reverse = True)
    if args.verbose:
        w_list = {}
        for entry in new_d:
            if entry[1] in w_list.keys():
                w_list[entry[1]].append(entry[0])
            else:
                w_list[entry[1]] = [entry[0]]
        for k,v in w_list.items():
            print("Words that appear {} time(s): ".format(k), end ="")
            for word in v[:-1]:
                print(word, end = ", ")
            print("{}.\n".format(v[-1]))
    else:
        for x in new_d[:args.word]:
            print('{:} {:}'.format( x[0], x[1]))
    return
    
if __name__ == '__main__':
    main()
        